@using Zooni.Models
@model Calendario
@{
    ViewData["Title"] = "Calendario - Zooni";
    Layout = null;
}
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>@ViewData["Title"]</title>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />

<style>
:root {
    --verde: #3ac37d;
    --amarillo: #FFD85A;
    --rojo: #e14a4a;
    --marron: #3a2a1b;
    --gris: #2c2c2c;
    --blanco: #ffffff;
    --overlay: rgba(0, 0, 0, 0.45);
    --gradiente: linear-gradient(160deg, #e9f9f0 0%, #c6ebd1 100%);
}

html, body {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    font-family: 'Poppins', sans-serif;
    background: var(--gradiente);
    color: var(--gris);
    overflow-x: hidden;
}

header {
    position: fixed;
    top: 15px;
    left: 20px;
    z-index: 10;
}
.menu-icon {
    width: 36px;
    height: 36px;
    cursor: pointer;
    transition: transform .25s ease;
}
.menu-icon:hover { transform: scale(1.1); }

.menu-lateral {
    position: fixed;
    top: 0;
    left: 0;
    transform: translateX(-100%);
    width: 250px;
    height: 100%;
    background: #fff;
    box-shadow: 4px 0 12px rgba(0,0,0,0.15);
    display: flex;
    flex-direction: column;
    padding: 2.5rem 1.2rem;
    gap: 1rem;
    transition: transform 0.35s ease;
    z-index: 999;
}
.menu-lateral.abierto { transform: translateX(0); }
.menu-lateral a {
    text-decoration: none;
    font-weight: 600;
    color: var(--gris);
    font-size: 1.05rem;
    padding: 0.5rem 0.8rem;
    border-radius: 10px;
    transition: all .25s ease;
}
.menu-lateral a:hover { background: var(--verde); color: #fff; }

.cerrar-menu {
    align-self: flex-end;
    font-size: 1.4rem;
    cursor: pointer;
    margin-bottom: 1.5rem;
}
.overlay {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: var(--overlay);
    opacity: 0; pointer-events: none;
    transition: opacity .3s ease;
    z-index: 998;
}
.overlay.activo { opacity: 1; pointer-events: auto; }

main {
    width: 100%;
    max-width: 700px;
    margin: 100px auto 120px auto;
    padding: 0 20px;
    box-sizing: border-box;
}
.titulo {
    text-align: center;
    font-size: 2rem;
    font-weight: 700;
    color: var(--gris);
    margin-bottom: 30px;
}

.evento {
    background: #ffffff;
    border-radius: 12px;
    padding: 18px 20px;
    margin-bottom: 16px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.12);
    transition: all .3s ease;
    position: relative;
}
.evento h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--gris);
}
.evento .tipo {
    font-size: .9rem;
    color: var(--verde);
    margin-top: 5px;
}
.evento .fecha {
    color: #666;
    font-size: .9rem;
    margin-top: 4px;
}
.evento .descripcion {
    margin-top: 8px;
    font-size: .95rem;
    color: #444;
}
.evento.vacuna { border-left: 6px solid #ff7070; }
.evento.paseo { border-left: 6px solid #3ac37d; }
.evento.consulta { border-left: 6px solid #49a7ff; }
.evento.otro { border-left: 6px solid #ffd85a; }

.acciones {
    position: absolute;
    top: 10px;
    right: 14px;
    display: flex;
    gap: 8px;
}
.acciones button {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    color: #666;
    transition: transform .2s, color .2s;
}
.btn-edit:hover { transform: scale(1.2); color: var(--verde); }
.btn-del:hover { transform: scale(1.2); color: crimson; }

.boton-agregar {
    position: fixed;
    bottom: 25px;
    right: 25px;
    background: var(--verde);
    color: white;
    font-size: 2rem;
    border: none;
    border-radius: 50%;
    width: 58px;
    height: 58px;
    cursor: pointer;
    box-shadow: 0 5px 10px rgba(0,0,0,0.25);
    transition: background .3s ease;
}
.boton-agregar:hover { background: #2fa66a; }

.modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.4);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}
.modal-content {
    background: #ffffff;
    border-radius: 14px;
    padding: 20px;
    width: 90%;
    max-width: 400px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.25);
}
.modal-content h2 {
    color: var(--verde);
    margin-bottom: 14px;
    font-size: 1.4rem;
}
.modal-content input, .modal-content textarea, .modal-content select {
    width: 100%;
    padding: 10px;
    margin-bottom: 12px;
    border-radius: 8px;
    border: 1px solid #ccc;
    font-family: inherit;
    font-size: 0.95rem;
}
.modal-content button {
    background: var(--verde);
    color: white;
    border: none;
    padding: 9px 14px;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
}
.modal-content button:hover { background: #2fa66a; }

@@media (max-width: 480px) {
    .titulo { font-size: 1.6rem; }
    .evento { padding: 14px 16px; }
    .boton-agregar { width: 50px; height: 50px; font-size: 1.6rem; }
}
</style>
</head>

<body>
<header>
    <img src="/img/icons/hamburger.png" alt="Men√∫" class="menu-icon" id="abrirMenu" />
</header>

<div class="menu-lateral" id="menuLateral">
    <div class="cerrar-menu" id="cerrarMenu">‚úñ</div>
    <a href="/Home/Index">Inicio</a>
    <a href="/Comunidad">Comunidad</a>
    <a href="/Marketplace">Marketplace</a>
    <a href="/home/FichaMedica">Ficha m√©dica</a>
    <a href="/home/calendario">Calendario</a>
    <a href="/Chat/ChatZooni">Asistente Virtual</a>
    <a href="/Closet">Closet</a>
    <a href="/Home/Perfil">Perfil</a>
    <a href="/Home/configuracion">Configuraci√≥n</a>
    <a href="/Auth/Logout" style="color:red;">Cerrar sesi√≥n</a>
</div>

<div class="overlay" id="overlay"></div>

<main>
    <div class="titulo">Calendario de Cuidados</div>

    <div id="eventContainer">
        @if (Model?.Eventos?.Count > 0)
        {
            foreach (var ev in Model.Eventos.OrderBy(e => e.Fecha))
            {
                var clase = ev.Tipo?.ToLower() switch
                {
                    "vacuna" => "vacuna",
                    "paseo" => "paseo",
                    "consulta" => "consulta",
                    _ => "otro"
                };
                <div class="evento @clase" 
                     draggable="true" 
                     data-id="@ev.Id_Evento" 
                     data-fecha="@ev.Fecha.ToString("yyyy-MM-ddTHH:mm")">
                    <div class="acciones">
                        <button class="btn-edit" onclick="editarEvento(@ev.Id_Evento, '@ev.Titulo', '@ev.Descripcion', '@ev.Tipo', '@ev.Fecha.ToString("yyyy-MM-ddTHH:mm")')">‚úèÔ∏è</button>
                        <button class="btn-del" onclick="eliminarEvento(@ev.Id_Evento)">üóëÔ∏è</button>
                    </div>
                    <h3>@ev.Titulo</h3>
                    <div class="tipo">@ev.Tipo</div>
                    <div class="fecha">@ev.Fecha.ToString("dd/MM/yyyy HH:mm")</div>
                    <div class="descripcion">@ev.Descripcion</div>
                </div>
            }
        }
        else
        {
            <p style="text-align:center; color:#333; font-weight:500; margin-top:40px;">No hay eventos programados.</p>
        }
    </div>
</main>

<button class="boton-agregar" onclick="abrirModal()">Ôºã</button>

<div id="modal" class="modal">
  <div class="modal-content">
    <h2 id="modalTitulo">Nuevo evento</h2>
    <form id="formEvento" method="post" action="/Home/CrearEvento">
        <input type="hidden" name="Id_Evento" id="Id_Evento" />
        <input type="text" name="Titulo" id="Titulo" placeholder="T√≠tulo del evento" required />
        <textarea name="Descripcion" id="Descripcion" placeholder="Descripci√≥n opcional"></textarea>
        <input type="datetime-local" name="Fecha" id="Fecha" required />
        <select name="Tipo" id="Tipo" required>
            <option value="Vacuna">Vacuna</option>
            <option value="Paseo">Paseo</option>
            <option value="Consulta">Consulta</option>
            <option value="Otro">Otro</option>
        </select>
        <button type="submit">Guardar</button>
        <button type="button" onclick="cerrarModal()" style="background:#ccc;color:#333;margin-left:10px;">Cancelar</button>
    </form>
  </div>
</div>

<script>
// ======= MEN√ö =======
const menu = document.getElementById("menuLateral");
const overlay = document.getElementById("overlay");
document.getElementById("abrirMenu").onclick = () => { menu.classList.add("abierto"); overlay.classList.add("activo"); };
document.getElementById("cerrarMenu").onclick = () => { menu.classList.remove("abierto"); overlay.classList.remove("activo"); };
overlay.onclick = () => { menu.classList.remove("abierto"); overlay.classList.remove("activo"); };

// ======= MODAL =======
function abrirModal(){ document.getElementById('modal').style.display='flex'; }
function cerrarModal(){ document.getElementById('modal').style.display='none'; limpiarFormulario(); }

function editarEvento(id, titulo, desc, tipo, fecha) {
    document.getElementById('modalTitulo').innerText = "Editar evento";
    document.getElementById('Id_Evento').value = id;
    document.getElementById('Titulo').value = titulo;
    document.getElementById('Descripcion').value = desc;
    document.getElementById('Tipo').value = tipo;
    document.getElementById('Fecha').value = fecha;
    abrirModal();
}

function limpiarFormulario() {
    document.getElementById('formEvento').reset();
    document.getElementById('Id_Evento').value = "";
    document.getElementById('modalTitulo').innerText = "Nuevo evento";
}

function eliminarEvento(id) {
    if (confirm("¬øSeguro que quer√©s eliminar este evento?")) {
        fetch(`/Home/EliminarEvento/${id}`, { method: 'POST' })
            .then(() => location.reload());
    }
}

// ======= COLOR SEG√öN URGENCIA =======
function actualizarColoresUrgencia() {
    const eventos = document.querySelectorAll('.evento');
    const hoy = new Date();

    eventos.forEach(ev => {
        const fechaEv = new Date(ev.dataset.fecha);
        const diasRestantes = Math.ceil((fechaEv - hoy) / (1000 * 60 * 60 * 24));
        const total = 30; // escala de 30 d√≠as
        const progreso = Math.max(0, Math.min(1, 1 - diasRestantes / total));

        // Interpolaci√≥n de color (verde ‚Üí amarillo ‚Üí rojo)
        const r = Math.floor(58 + progreso * (225 - 58));
        const g = Math.floor(195 - progreso * 145);
        const b = Math.floor(125 - progreso * 70);
        ev.style.borderLeftColor = `rgb(${r},${g},${b})`;

        if (diasRestantes <= 3) {
            ev.style.background = "rgba(255,230,230,0.9)";
        } else if (diasRestantes <= 7) {
            ev.style.background = "rgba(255,247,230,0.9)";
        } else {
            ev.style.background = "rgba(255,255,255,0.9)";
        }
    });
}
actualizarColoresUrgencia();
setInterval(actualizarColoresUrgencia, 86400000); // cada d√≠a
</script>
</body>
</html>
